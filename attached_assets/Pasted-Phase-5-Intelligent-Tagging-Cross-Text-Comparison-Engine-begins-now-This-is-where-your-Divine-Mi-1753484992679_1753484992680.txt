Phase 5: Intelligent Tagging + Cross-Text Comparison Engine begins now. This is where your Divine Mirror gets smart enough to teach a theology professor how to repent with footnotes.

ðŸ”¥ Phase 5 Goal:
Enhance every vector chunk with topic tags, cross-scripture references, and semantic fingerprints to enable intelligent filtering, analysis, and comparison.

ðŸ§  STEP 1: Add GPT-Based Auto Tagging (Keywords + Concepts)
We'll now go through all embedded chunks and generate thematic tags using GPT.

ðŸ”§ Script: tag_chunks.py
python
Copy
Edit
import os
import openai
import chromadb
from chromadb.config import Settings

client = chromadb.Client(Settings(chroma_db_impl="duckdb+parquet", persist_directory="chromadb_storage"))
collection = client.get_collection("sacred_texts")

openai.api_key = os.getenv("OPENAI_API_KEY")

def generate_tags(text):
    prompt = f"""
    Read the following text and list 3â€“5 keywords or topics it covers.
    Respond only with comma-separated tags.

    TEXT:
    {text}
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3
    )
    tags = response['choices'][0]['message']['content']
    return [tag.strip() for tag in tags.split(",") if tag.strip()]

def tag_all_chunks():
    results = collection.get(include=["documents", "metadatas", "ids"])
    for i, chunk in enumerate(results["documents"]):
        try:
            tags = generate_tags(chunk)
            metadata = results["metadatas"][i]
            metadata["tags"] = tags
            collection.update(ids=[results["ids"][i]], metadatas=[metadata])
            print(f"Tagged {metadata['title']} chunk {i} with {tags}")
        except Exception as e:
            print(f"Tagging error: {e}")

if __name__ == "__main__":
    tag_all_chunks()
    client.persist()
ðŸ”„ STEP 2: Cross-Text Comparison Engine
We'll now enable semantic comparison between traditions or versions of the same verse.

Youâ€™ll need a special compare.py script with a function like this:

python
Copy
Edit
def compare_chunks(query_text, filter_a, filter_b):
    result_a = collection.query(query_texts=[query_text], where=filter_a, n_results=3)
    result_b = collection.query(query_texts=[query_text], where=filter_b, n_results=3)

    print("ðŸ”µ Filter A Results:")
    for r in result_a['documents'][0]:
        print(r)
    print("\nðŸ”´ Filter B Results:")
    for r in result_b['documents'][0]:
        print(r)
Example Filters:
python
Copy
Edit
filter_a = {"tradition": "Christianity", "type": "Translations"}
filter_b = {"tradition": "Judaism", "type": "Original"}
compare_chunks("What is hell?", filter_a, filter_b)
ðŸ“Š STEP 3: Add Filtering to UI (Optional)
Later, weâ€™ll add dropdowns or buttons to filter by:

Tradition

Period

Tag (from GPT)

Title or Book

âœ… Final Result:
You now have a tagged, searchable, and comparative sacred database that:

Shows what a teaching originally meant

Compares it across religions and versions

Tags it by concept (heaven, repentance, Sheol, law, grace, etc.)

Allows DeepSeek fallback when offline